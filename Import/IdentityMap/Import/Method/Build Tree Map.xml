<AML>
 <Item type="Method" id="638836A04C0D4D5D95069CCCE6104FCD" action="add">
  <comments />
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// display diagram
require([
    "../javascript/d3/d3.js"
], function(
    d3
) {
    console.log("d3: " + d3);

    // setup objects for diagram
    var svg = d3.select("svg"),
        margin = 20,
        diameter = +svg.attr("height"),
        g,
        node,
        circle,
        text,
        search_val = "%";
    
    var color = d3.scaleLinear()
        .domain([-1, 5])
        .range(["#4EB4B0", "#3D445E"])
        .interpolate(d3.interpolateHcl);
    
    var pack = d3.pack()
        .size([diameter - margin, diameter - margin])
        .padding(2);
        
    var root = json_data;
    
    initDiagram();
    
    function initDiagram()
    {
        g = svg.append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");
        
        // setup data
        root = d3.hierarchy(root)
            .sum(function(d) { return d.size; })
            .sort(function(a, b) { return b.value - a.value; });
    
      var focus = root,
          nodes = pack(root).descendants(),
          view;
    
      var circle = g.selectAll("circle")
        .data(nodes)
        .enter().append("circle")
          .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
          .attr("name", function(d) { return d.name; })
                .style("fill", function(d) { return d.children ? color(d.depth) : null; })
                .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });
        
        text = g.selectAll("text")
            .data(nodes)
            .enter().append("text")
                .attr("class", "label")
          .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
                .style("display", function(d) { return d.parent === root ? "inline" : "none"; })
                .text(function(d) { return d.data.name; });
        
        node = g.selectAll("circle,text");
        
        svg
            .style("background", color(-1))
            .on("click", function() { zoom(root); });
        
        zoomTo([root.x, root.y, root.r * 2 + margin]);
    }
    
    function zoom(d) {
        var focus0 = focus; focus = d;
        
        console.log(d);
        
        var currLabel = document.getElementById("curr-label");
        currLabel.innerHTML = d.data.name;
    
        var transition = d3.transition()
            .duration(d3.event.altKey ? 7500 : 750)
            .tween("zoom", function(d) {
              var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
              return function(t) { zoomTo(i(t)); };
            });
    
        transition.selectAll("text")
          .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
            .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
            .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
            .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
      }
    
      function zoomTo(v) {
        var k = diameter / v[2]; view = v;
        node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
        circle.attr("r", function(d) { return d.r * k; });
      }
});


function Identity(name, id, alias, relationships)
{
    var identity = {};
    
    identity.is_alias = alias;
    identity.name = name;
    identity.id = id;
    
    var children = [];
    
    for (var j=0; j < relationships.getItemCount(); j++)
    {
        var related = relationships.getItemByIndex(j);
        if (related === null)
            continue;
        
        var rel_name = related.getProperty("name","no");
        var rel_id = related.getProperty("id","no");
        var rel_alias = related.getProperty("is_alias","1");
        var rel_rels = related.getItemsByXPath("Relationships/Item/Relationships/Item");
        
        var child = Identity(rel_name, rel_id, rel_alias, rel_rels);
        children.push(child);
    }
    
    if (children.length === 0)
    {
        var size = Math.floor(Math.random()*(10000-1000+1)+1000);
        identity.size = size;
    }
    else
    {
        identity.children = children;
    }
    
    return identity;
}

]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Build Tree Map</name>
 </Item>
</AML>